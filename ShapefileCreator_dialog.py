# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShapefileCreatorDialog
                                 A QGIS plugin
 Membuat shapefile berdasarkan nilai dari sebuah field yang dipilih
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | SIG UGM 2024
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QDialog, QFileDialog, QMessageBox
from qgis.core import QgsProject

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ShapefileCreator_dialog_base.ui'))


class ShapefileCreatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ShapefileCreatorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.layer_combo.currentIndexChanged.connect(self.update_fields)
        self.field_combo.currentIndexChanged.connect(self.update_values)
        self.browse_button.clicked.connect(self.browse_output)

        self.load_layers()

        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

    def load_layers(self):
        self.layer_combo.clear()
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            self.layer_combo.addItem(layer.name(), layer)

    def update_fields(self, index):
        self.field_combo.clear()
        layer = self.layer_combo.currentData()
        if layer is not None:
            fields = [field.name() for field in layer.fields()]
            self.field_combo.addItems(fields)
        self.value_combo.clear()

    def update_values(self, index):
        self.value_combo.clear()
        layer = self.layer_combo.currentData()
        field_name = self.field_combo.currentText()
        if layer is not None and field_name:
            values = layer.uniqueValues(layer.fields().indexFromName(field_name))
            self.value_combo.addItems(map(str, values))

    def browse_output(self):
        file_path, _ = QFileDialog.getSaveFileName(self, "Simpan Shapefile", "", "Shapefile (*.shp)")
        if file_path:
            self.output_edit.setText(file_path)

    def accept(self):
        layer = self.layer_combo.currentData()
        field_name = self.field_combo.currentText()
        field_value = self.value_combo.currentText()
        output_path = self.output_edit.text()

        if not layer:
            QMessageBox.warning(self, "Peringatan", "Pilih layer sumber terlebih dahulu.")
            return
        if not field_name:
            QMessageBox.warning(self, "Peringatan", "Pilih nama field terlebih dahulu.")
            return
        if not field_value:
            QMessageBox.warning(self, "Peringatan", "Pilih nilai field terlebih dahulu.")
            return
        if not output_path:
            QMessageBox.warning(self, "Peringatan", "Tentukan nama output terlebih dahulu.")
            return

        super().accept()