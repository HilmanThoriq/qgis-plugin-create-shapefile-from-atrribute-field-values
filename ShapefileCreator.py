# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShapefileCreator
                                 A QGIS plugin
 Membuat shapefile berdasarkan nilai dari sebuah field yang dipilih
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | SIG UGM 2024
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QDialog
from qgis.core import (
    QgsVectorLayer, QgsFeature, QgsGeometry, QgsWkbTypes, QgsFields, QgsField, QgsFeatureRequest, 
    QgsProcessingException, QgsVectorFileWriter, QgsProject, QgsCoordinateReferenceSystem, QgsSymbol, QgsMarkerSymbol, QgsLineSymbol, QgsFillSymbol
)
from PyQt5.QtCore import QVariant

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ShapefileCreator_dialog import ShapefileCreatorDialog
import os.path


class ShapefileCreator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ShapefileCreator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Create New Shapefile from Attribute Field Values')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ShapefileCreator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ShapefileCreator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create New Shapefile from Attribute Field Values'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removeToolBarIcon(self.action)


    def run(self):
        """Run method that performs all the real work"""

        layer = self.iface.activeLayer()
        if layer is None:
            QMessageBox.warning(None, "Peringatan", "Tidak ada layer yang aktif.")
            return

        dialog = ShapefileCreatorDialog()
        if dialog.exec_() == QDialog.Accepted:
            layer = dialog.layer_combo.currentData()
            field_name = dialog.field_combo.currentText()
            field_value = dialog.value_combo.currentText()
            output_path = dialog.output_edit.text()
            self.create_shapefile(layer, field_name, field_value, output_path)


    def create_shapefile(self, layer, field_name, field_value, output_path):
        fields = layer.fields()
        crs = layer.crs()
        
        writer = QgsVectorFileWriter(output_path, 'UTF-8', fields, layer.wkbType(), crs, 'ESRI Shapefile')

        feature_count = 0
        for feature in layer.getFeatures():
            if str(feature[field_name]) == field_value:
                writer.addFeature(feature)
                feature_count += 1

        del writer

        print(f"Menambahkan {feature_count} fitur ke shapefile baru.")

        if feature_count == 0:
            QMessageBox.warning(self.iface.mainWindow(), "Peringatan", "Tidak ada fitur yang cocok dengan kriteria yang dipilih. Shapefile kosong.")
            return

        new_layer = QgsVectorLayer(output_path, os.path.basename(output_path)[:-4], 'ogr')
        if not new_layer.isValid():
            QMessageBox.critical(self.iface.mainWindow(), "Error", f"Gagal membuat layer dari {output_path}")
            return

        QgsProject.instance().addMapLayer(new_layer)

        # Zoom ke extent layer baru
        self.iface.mapCanvas().setExtent(new_layer.extent())
        self.iface.mapCanvas().refresh()

        # Terapkan style default
        self.apply_default_style(new_layer)

        QMessageBox.information(self.iface.mainWindow(), "Sukses", f"Shapefile baru berhasil dibuat untuk '{field_value}'.")

    def apply_default_style(self, layer):
        if layer.geometryType() == QgsWkbTypes.PointGeometry:
            layer.renderer().setSymbol(QgsMarkerSymbol.createSimple({'name': 'circle', 'color': 'red'}))
        elif layer.geometryType() == QgsWkbTypes.LineGeometry:
            layer.renderer().setSymbol(QgsLineSymbol.createSimple({'color': 'blue'}))
        elif layer.geometryType() == QgsWkbTypes.PolygonGeometry:
            layer.renderer().setSymbol(QgsFillSymbol.createSimple({'color': 'yellow', 'outline_color': 'black'}))
        layer.triggerRepaint()